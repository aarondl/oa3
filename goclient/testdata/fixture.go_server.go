// Code generated by oa3 (https://github.com/aarondl/oa3). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.
package oa3gen

import (
	"context"
	"fmt"
	"net/http"
	"net/http/httptest"
	"net/http/httputil"
	"time"

	"github.com/aarondl/opt/omit"
	"golang.org/x/time/rate"
)

type ctxKey string

const (
	ctxKeyDebug ctxKey = "debug"
)

var (
	apiHTTPClient = &http.Client{Timeout: time.Second * 5}
)

// Client is a generated package for consuming an openapi spec.
//
// A great api
type Client struct {
	httpClient  *http.Client
	httpHandler http.Handler
	limiter     *rate.Limiter
}

// WithDebug creates a context that will emit debugging information to stdout
// for each request.
func WithDebug(ctx context.Context) context.Context {
	return context.WithValue(ctx, ctxKeyDebug, "t")
}

func hasDebug(ctx context.Context) bool {
	v := ctx.Value(ctxKeyDebug)
	return v != nil && v.(string) == "t"
}

// NewClient constructs an api client, optionally using a supplied http.Client
// to be able to add instrumentation or customized timeouts.
//
// If nil is supplied then this package's generated apiHTTPClient is used which
// has reasonable defaults for timeouts.
//
// It also takes an optional rate limiter to implement rate limiting.
func NewClient(httpClient *http.Client, limiter *rate.Limiter) Client {
	if httpClient != nil {
		return Client{httpClient: httpClient}
	}
	return Client{httpClient: apiHTTPClient}
}

// NewLocalClient constructs an api client, but takes in a handler to call
// with the prepared requests instead of an http client that will touch the
// network. Useful for testing.
func NewLocalClient(httpHandler http.Handler) Client {
	return Client{httpHandler: httpHandler}
}

func (c Client) doRequest(ctx context.Context, req *http.Request) (*http.Response, error) {
	if c.limiter != nil {
		if err := c.limiter.Wait(ctx); err != nil {
			return nil, err
		}
	}

	if hasDebug(ctx) {
		reqDump, err := httputil.DumpRequestOut(req, true)
		if err != nil {
			return nil, fmt.Errorf("failed to emit debugging info: %w", err)
		}
		fmt.Printf("%s\n", reqDump)
	}

	var resp *http.Response
	if c.httpHandler != nil {
		w := httptest.NewRecorder()
		c.httpHandler.ServeHTTP(w, req)
		resp = w.Result()
	} else {
		var err error
		resp, err = c.httpClient.Do(req)
		if err != nil {
			return nil, err
		}
	}

	if hasDebug(ctx) {
		respDump, err := httputil.DumpResponse(resp, true)
		if err != nil {
			return nil, fmt.Errorf("failed to emit debugging info: %w", err)
		}
		fmt.Printf("%s\n", respDump)
	}

	return resp, nil
}

// AuthenticateResponse one-of enforcer
//
// Implementors:
// - HTTPStatusOk
type AuthenticateResponse interface {
	AuthenticateImpl()
}

// AuthenticateImpl implements AuthenticateResponse(200) for HTTPStatusOk
func (HTTPStatusOk) AuthenticateImpl() {}

// TestArrayRequestResponse one-of enforcer
//
// Implementors:
// - HTTPStatusOk
type TestArrayRequestResponse interface {
	TestArrayRequestImpl()
}

// TestArrayRequestImpl implements TestArrayRequestResponse(200) for HTTPStatusOk
func (HTTPStatusOk) TestArrayRequestImpl() {}

// TestEnumQueryRequestResponse one-of enforcer
//
// Implementors:
// - HTTPStatusOk
type TestEnumQueryRequestResponse interface {
	TestEnumQueryRequestImpl()
}

// TestEnumQueryRequestImpl implements TestEnumQueryRequestResponse(200) for HTTPStatusOk
func (HTTPStatusOk) TestEnumQueryRequestImpl() {}

// TestInlinePrimitiveBodyResponse one-of enforcer
//
// Implementors:
// - HTTPStatusOk
type TestInlinePrimitiveBodyResponse interface {
	TestInlinePrimitiveBodyImpl()
}

// TestInlinePrimitiveBodyImpl implements TestInlinePrimitiveBodyResponse(200) for HTTPStatusOk
func (HTTPStatusOk) TestInlinePrimitiveBodyImpl() {}

// TestInlineResponse one-of enforcer
//
// Implementors:
// - TestInline200Inline
// - TestInline201Inline
type TestInlineResponse interface {
	TestInlineImpl()
}

// TestInlineImpl implements TestInlineHeadersResponse(200) for
func (TestInline200Inline) TestInlineImpl() {}

// TestInlineImpl implements TestInlineHeadersResponse(201) for
func (TestInline201Inline) TestInlineImpl() {}

// TestUnknownBodyTypeResponse one-of enforcer
//
// Implementors:
// - HTTPStatusOk
type TestUnknownBodyTypeResponse interface {
	TestUnknownBodyTypeImpl()
}

// TestUnknownBodyTypeImpl implements TestUnknownBodyTypeResponse(200) for HTTPStatusOk
func (HTTPStatusOk) TestUnknownBodyTypeImpl() {}

// GetUserResponse one-of enforcer
//
// Implementors:
// - HTTPStatusNotModified
type GetUserResponse interface {
	GetUserImpl()
}

// GetUserImpl implements GetUserResponse(304) for HTTPStatusNotModified
func (HTTPStatusNotModified) GetUserImpl() {}

// SetUserResponse one-of enforcer
//
// Implementors:
// - SetUser200HeadersResponse
// - Primitives - #/components/schemas/Primitives
type SetUserResponse interface {
	SetUserImpl()
}

// SetUser200WrappedResponse wraps the normal body response with a
// struct to be able to additionally return headers or differentiate between
// multiple response codes with the same response body.
type SetUser200WrappedResponse struct {
	HeaderXResponseHeader omit.Val[string]
	Body                  Primitives
}

// SetUserImpl implements SetUserResponse(200) for SetUser200WrappedResponse
func (SetUser200WrappedResponse) SetUserImpl() {}

// SetUserdefaultWrappedResponse wraps the normal body response with a
// struct to be able to additionally return headers or differentiate between
// multiple response codes with the same response body.
type SetUserdefaultWrappedResponse struct {
	Body Primitives
}

// SetUserImpl implements SetUserResponse(default) for SetUserdefaultWrappedResponse
func (SetUserdefaultWrappedResponse) SetUserImpl() {}

// HTTPStatusNotModified is an empty response
type HTTPStatusNotModified struct{}

// HTTPStatusOk is an empty response
type HTTPStatusOk struct{}
