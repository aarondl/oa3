openapi: 3.0.0
info:
  title: Go Server
  version: 0.0.0
  description: A great api

paths:
  /users:
    get:
      operationId: getUser
      description: >
        Retrieves a user with a long description that spans multiple lines so
        that we can see that both wrapping and long-line support is not bleeding
        over the sacred 80 char limit.
      tags: [users]
      parameters:
        - name: 'user_id'
          in: 'query'
          schema:
            type: string
            format: uuid
      responses:
        '304': { description: Ok }
    post:
      operationId: setUser
      description: Sets a user
      tags: [users]
      requestBody:
        description: Description of a response body
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Primitives' }
      responses:
        '200': { description: Ok }
        'default':
          description: Ok
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Primitives' }
    x-dont-ignore: true

  /auth:
    post:
      operationId: authenticate
      responses:
        '200': { description: Ok }

components:
  schemas:
    Primitives:
      description: Checks to see that all Go primitives work
      type: object
      required: [int, int32, int64, float, float32, float64, str, bool,
        int_null, int32_null, int64_null, float_null, float32_null, float64_null, str_null, bool_null]
      properties:
        int:   { type: integer, description: "Normal int" }
        int32: { type: integer, format: int32 }
        int64: { type: integer, format: int64 }
        float:   { type: number }
        float32: { type: number, format: float }
        float64: { type: number, format: double }
        str:  { type: string }
        bool: { type: boolean }

        int_null:   { type: integer, nullable: true }
        int32_null: { type: integer, format: int32, nullable: true }
        int64_null: { type: integer, format: int64, nullable: true }
        float_null:   { type: number, nullable: true }
        float32_null: { type: number, format: float, nullable: true }
        float64_null: { type: number, format: double, nullable: true }
        str_null:  { type: string, nullable: true }
        bool_null: { type: boolean, nullable: true }

    Array:
      description: Just normal arrays
      type: array
      items: { type: string }

    Arrays:
      description: Arrays as a property
      type: object
      required: [array]
      properties:
        array: { type: array, items: { type: string } }

    ArrayRecursive:
      description: Recursive definition of an array
      type: array
      items:
        description: Recursive
        type: array
        items:
          description: Recursive
          type: array
          items: { type: string }

    ArrayEmbedded:
      description: Embedded object in an array
      type: array
      items:
        description: This object is embedded in an array
        required: [prop]
        type: object
        properties:
          prop: { type: string }

    Map:
      description: Map types
      type: object
      additionalProperties: { type: array, items: { type: string } }

    MapEmbedded:
      description: Map types with an embedded object
      type: object
      additionalProperties:
        type: object
        required: [prop]
        properties:
          prop: { type: string }

    MapRecursive:
      description: Recursively defined maps
      type: object
      additionalProperties:
        description: Recursive
        type: object
        additionalProperties:
          description: Recursive
          type: object
          additionalProperties: { type: string }
    
    Ref:
      description: References to other objects
      type: object
      required: [ref_normal]
      properties:
        ref_normal: { $ref: '#/components/schemas/RefTarget' }
        ref_null: { $ref: '#/components/schemas/RefTargetNullable' }

    RefTarget:
      description: Referred to object
      type: object
      required: [prop]
      properties:
        prop: { type: string }

    RefTargetNullable:
      description: Referred to object
      nullable: true
      type: object
      required: [prop]
      properties:
        prop: { type: string }

    Enum:
      description: Enum type
      type: string
      enum: [one, two, three]

    AllOf:
      description: All of example
      type: object
      allOf:
        - { $ref: '#/components/schemas/InheritanceA' }
        - { $ref: '#/components/schemas/InheritanceB' }
        - description: Desc
          type: object
          required: [someprop]
          properties:
            someprop: { type: string, description: 'A string' }

    OneOf:
      type: object
      description: An example of an object that can be exactly one of 3 things
      oneOf:
        - { $ref: '#/components/schemas/InheritanceA' }
        - { $ref: '#/components/schemas/InheritanceB' }
        - description: Desc
          type: object
          required: [someprop]
          properties:
            someprop: { type: string, description: 'A string' }

    AnyOf:
      type: object
      description: An example of an object that can be exactly one of 3 things
      oneOf:
        - { $ref: '#/components/schemas/InheritanceA' }
        - { $ref: '#/components/schemas/InheritanceB' }
        - description: Desc
          type: object
          required: [someprop]
          properties:
            someprop: { type: string, description: 'A string' }

    InheritanceA:
      description: Consumable
      type: object
      required: [a]
      properties:
        a: { type: string }

    InheritanceB:
      description: Consumable
      type: object
      required: [b]
      properties:
        b: { type: string }
