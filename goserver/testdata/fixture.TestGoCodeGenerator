&openapi3spec.OpenAPI3{
	OpenAPI: "3.0.0",
	Info: openapi3spec.Info{
		Title: "Go Server",
		Description: support.Ptr("A great api"),
		Version: "0.0.0",
	},
	Servers: []openapi3spec.Server{
		openapi3spec.Server{
			URL: "http://dev.local:3030",
			Description: support.Ptr("Local development"),
		},
		openapi3spec.Server{
			URL: "http://prod.local:3030/{one}/{two}",
			Description: support.Ptr("Production"),
			Variables: map[string]*openapi3spec.ServerVariable{
				"two":&openapi3spec.ServerVariable{
					Default: "two",
					Description: support.Ptr("Variable"),
				},
				"one":&openapi3spec.ServerVariable{
					Default: "one",
					Description: support.Ptr("Variable"),
				},
			},
		},
		openapi3spec.Server{
			URL: "http://variables.local:3030/{variable}",
			Description: support.Ptr("Variable path"),
			Variables: map[string]*openapi3spec.ServerVariable{
				"variable":&openapi3spec.ServerVariable{
					Enum: []string{
						"v1",
						"v2",
						"v3",
					},
					Default: "v1",
					Description: support.Ptr("Variable"),
				},
			},
		},
	},
	Paths: map[string]*openapi3spec.PathRef{
		"/test/type_overrides":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					OperationID: "testTypeOverrides",
					Parameters: []*openapi3spec.ParameterRef{
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "number",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("decimal"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "date",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("date"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "number_null",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Nullable: true,
										Format: support.Ptr("decimal"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "date_null",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Nullable: true,
										Format: support.Ptr("date"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "number_non_req",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("decimal"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "date_non_req",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("date"),
									},
								},
							},
						},
					},
					RequestBody: &openapi3spec.RequestBodyRef{
						RequestBody: &openapi3spec.RequestBody{
							Description: support.Ptr("Desc"),
							Content: map[string]*openapi3spec.MediaType{
								"application/json":&openapi3spec.MediaType{
									Schema: openapi3spec.SchemaRef{
										Ref: "#/components/schemas/Primitives",
										Schema: &openapi3spec.Schema{
											Description: support.Ptr("Checks to see that all Go primitives work"),
											Type: "object",
											Required: []string{
												"int",
												"int32",
												"int64",
												"float",
												"float32",
												"float64",
												"str",
												"bool",
												"int_null",
												"int32_null",
												"int64_null",
												"float_null",
												"float32_null",
												"float64_null",
												"str_null",
												"bool_null",
												"uuid",
												"uuid_null",
												"decimal",
												"decimal_null",
												"time_val",
												"time_null",
												"datetime_val",
												"datetime_null",
												"date_val",
												"date_null",
											},
											Properties: map[string]*openapi3spec.SchemaRef{
												"float_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Nullable: true,
														MultipleOf: support.Ptr(5.500000),
													},
												},
												"date_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("date"),
													},
												},
												"duration_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("duration"),
													},
												},
												"str":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														MaxLength: support.Ptr(5),
														MinLength: support.Ptr(5),
														Enum: []interface {}{
															"hello",
														},
													},
												},
												"float64_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Nullable: true,
														Minimum: support.Ptr(5.000000),
														Format: support.Ptr("double"),
													},
												},
												"float":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														MultipleOf: support.Ptr(5.500000),
													},
												},
												"datetime_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("date-time"),
													},
												},
												"date_val":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("date"),
													},
												},
												"decimal":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("decimal"),
													},
												},
												"int_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Nullable: true,
														MultipleOf: support.Ptr(5.000000),
													},
												},
												"int64_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Nullable: true,
														Minimum: support.Ptr(5.000000),
														Format: support.Ptr("int64"),
													},
												},
												"uuid":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("uuid"),
													},
												},
												"float64":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Minimum: support.Ptr(5.500000),
														Format: support.Ptr("double"),
													},
												},
												"bool":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "boolean",
													},
												},
												"float32":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Maximum: support.Ptr(5.500000),
														Format: support.Ptr("float"),
													},
												},
												"int":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Description: support.Ptr("Normal int"),
														Type: "integer",
														MultipleOf: support.Ptr(5.000000),
													},
												},
												"float32_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Nullable: true,
														Maximum: support.Ptr(5.000000),
														Format: support.Ptr("float"),
													},
												},
												"time_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("time"),
													},
												},
												"decimal_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("decimal"),
													},
												},
												"uuid_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("uuid"),
													},
												},
												"datetime_val":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("date-time"),
													},
												},
												"int32":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Maximum: support.Ptr(5.000000),
														Format: support.Ptr("int32"),
													},
												},
												"time_val":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("time"),
													},
												},
												"int64":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Minimum: support.Ptr(5.000000),
														Format: support.Ptr("int64"),
													},
												},
												"duration_val":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("duration"),
													},
												},
												"str_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														MaxLength: support.Ptr(5),
														MinLength: support.Ptr(5),
														Enum: []interface {}{
															"hello",
														},
													},
												},
												"bool_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "boolean",
														Nullable: true,
													},
												},
												"int32_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Nullable: true,
														Maximum: support.Ptr(5.000000),
														Format: support.Ptr("int32"),
													},
												},
											},
										},
									},
								},
							},
							Required: true,
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
				},
			},
		},
		"/test/single_servers":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					OperationID: "testSingleServerPathOverrideRequest",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
				},
				Post: &openapi3spec.Operation{
					OperationID: "testSingleServerOpOverrideRequest",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
					Servers: []openapi3spec.Server{
						openapi3spec.Server{
							URL: "http://op.dev.local:3030",
							Description: support.Ptr("Local development"),
						},
					},
				},
				Servers: []openapi3spec.Server{
					openapi3spec.Server{
						URL: "http://path.dev.local:3030",
						Description: support.Ptr("Local development"),
					},
				},
			},
		},
		"/test/servers":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					OperationID: "testServerPathOverrideRequest",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
				},
				Post: &openapi3spec.Operation{
					OperationID: "testServerOpOverrideRequest",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
					Servers: []openapi3spec.Server{
						openapi3spec.Server{
							URL: "http://op.dev.local:3030",
							Description: support.Ptr("Local development"),
						},
						openapi3spec.Server{
							URL: "http://op.prod.local:3030/{one}/{two}",
							Description: support.Ptr("Production"),
							Variables: map[string]*openapi3spec.ServerVariable{
								"one":&openapi3spec.ServerVariable{
									Default: "one",
									Description: support.Ptr("Variable"),
								},
								"two":&openapi3spec.ServerVariable{
									Default: "two",
									Description: support.Ptr("Variable"),
								},
							},
						},
						openapi3spec.Server{
							URL: "http://op.variables.local:3030/{variable}",
							Description: support.Ptr("Variable path"),
							Variables: map[string]*openapi3spec.ServerVariable{
								"variable":&openapi3spec.ServerVariable{
									Enum: []string{
										"v1",
										"v2",
										"v3",
									},
									Default: "v1",
									Description: support.Ptr("Variable"),
								},
							},
						},
					},
				},
				Servers: []openapi3spec.Server{
					openapi3spec.Server{
						URL: "http://path.dev.local:3030",
						Description: support.Ptr("Local development"),
					},
					openapi3spec.Server{
						URL: "http://path.prod.local:3030/{one}/{two}",
						Description: support.Ptr("Production"),
						Variables: map[string]*openapi3spec.ServerVariable{
							"one":&openapi3spec.ServerVariable{
								Default: "one",
								Description: support.Ptr("Variable"),
							},
							"two":&openapi3spec.ServerVariable{
								Default: "two",
								Description: support.Ptr("Variable"),
							},
						},
					},
					openapi3spec.Server{
						URL: "http://path.variables.local:3030/{variable}",
						Description: support.Ptr("Variable path"),
						Variables: map[string]*openapi3spec.ServerVariable{
							"variable":&openapi3spec.ServerVariable{
								Enum: []string{
									"v1",
									"v2",
									"v3",
								},
								Default: "v1",
								Description: support.Ptr("Variable"),
							},
						},
					},
				},
			},
		},
		"/auth":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Post: &openapi3spec.Operation{
					OperationID: "authenticate",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "Ok",
							},
						},
					},
				},
			},
		},
		"/test/array/request":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					OperationID: "testArrayRequest",
					RequestBody: &openapi3spec.RequestBodyRef{
						RequestBody: &openapi3spec.RequestBody{
							Description: support.Ptr("Desc"),
							Content: map[string]*openapi3spec.MediaType{
								"application/json":&openapi3spec.MediaType{
									Schema: openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "array",
											Items: &openapi3spec.SchemaRef{
												Schema: &openapi3spec.Schema{
													Type: "string",
												},
											},
										},
									},
								},
							},
							Required: true,
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
				},
			},
		},
		"/test/enum/query/request":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					OperationID: "testEnumQueryRequest",
					Parameters: []*openapi3spec.ParameterRef{
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "sort",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Enum: []interface {}{
											"ASC",
											"DESC",
										},
									},
								},
							},
						},
					},
					RequestBody: &openapi3spec.RequestBodyRef{
						RequestBody: &openapi3spec.RequestBody{
							Description: support.Ptr("Desc"),
							Content: map[string]*openapi3spec.MediaType{
								"application/json":&openapi3spec.MediaType{
									Schema: openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "array",
											Items: &openapi3spec.SchemaRef{
												Schema: &openapi3spec.Schema{
													Type: "string",
												},
											},
										},
									},
								},
							},
							Required: true,
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
				},
			},
		},
		"/test/queryintarrayparam":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Post: &openapi3spec.Operation{
					OperationID: "testQueryIntArrayParam",
					Parameters: []*openapi3spec.ParameterRef{
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "intarray",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "array",
										Items: &openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "integer",
												Format: support.Ptr("int32"),
											},
										},
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "intarrayrequired",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "array",
										Items: &openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "integer",
												Format: support.Ptr("int32"),
											},
										},
									},
								},
							},
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
				},
			},
		},
		"/test/maps":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					OperationID: "testMapsInline",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
								Content: map[string]*openapi3spec.MediaType{
									"application/json":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "object",
											},
										},
									},
								},
							},
						},
					},
				},
				Post: &openapi3spec.Operation{
					OperationID: "testMapsRef",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
								Content: map[string]*openapi3spec.MediaType{
									"application/json":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Ref: "#/components/schemas/MapAny",
											Schema: &openapi3spec.Schema{
												Description: support.Ptr("Map any"),
												Type: "object",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		"/users/{id}":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					Tags: []string{
						"users",
					},
					Description: support.Ptr("Retrieves a user with a long description that spans multiple lines so that we can see that both wrapping and long-line support is not bleeding over the sacred 80 char limit.\n"),
					OperationID: "getUser",
					Parameters: []*openapi3spec.ParameterRef{
						&openapi3spec.ParameterRef{
							Ref: "#/components/parameters/PathParam",
							Parameter: &openapi3spec.Parameter{
								Name: "id",
								In: "path",
								Required: true,
								Style: support.Ptr("simple"),
								Explode: support.Ptr(false),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Ref: "#/components/parameters/Param",
							Parameter: &openapi3spec.Parameter{
								Name: "param_component",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "valid_str",
								In: "header",
								Style: support.Ptr("simple"),
								Explode: support.Ptr(false),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Nullable: true,
										MaxLength: support.Ptr(5),
										MinLength: support.Ptr(2),
										Enum: []interface {}{
											"he\"llo",
										},
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "req_valid_str",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Nullable: true,
										MaxLength: support.Ptr(5),
										MinLength: support.Ptr(2),
										Enum: []interface {}{
											"he\"llo",
										},
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "valid_int",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "integer",
										MultipleOf: support.Ptr(2.000000),
										Maximum: support.Ptr(5.000000),
										ExclusiveMaximum: true,
										Minimum: support.Ptr(2.000000),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "req_valid_int",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "integer",
										MultipleOf: support.Ptr(2.000000),
										Maximum: support.Ptr(5.000000),
										ExclusiveMaximum: true,
										Minimum: support.Ptr(2.000000),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "valid_num",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "number",
										MultipleOf: support.Ptr(2.500000),
										Maximum: support.Ptr(10.500000),
										Minimum: support.Ptr(5.500000),
										ExclusiveMinimum: true,
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "req_valid_num",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "number",
										MultipleOf: support.Ptr(2.500000),
										Maximum: support.Ptr(10.500000),
										Minimum: support.Ptr(5.500000),
										ExclusiveMinimum: true,
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "valid_bool",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "boolean",
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "req_valid_bool",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "boolean",
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "req_str_format",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("uuid"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "date_time",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("date-time"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "date",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("date"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "time_val",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("time"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "duration_val",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										Format: support.Ptr("duration"),
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "array_prim_explode",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "array",
										Items: &openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "string",
											},
										},
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "array_prim_flat",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(false),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "array",
										Items: &openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "string",
											},
										},
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "array_prim_int_explode",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "array",
										Items: &openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "integer",
											},
										},
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "array_prim_int_flat",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(false),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "array",
										Items: &openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "integer",
											},
										},
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "array_enum_explode",
								In: "query",
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "array",
										Items: &openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "string",
												Enum: []interface {}{
													"a",
													"b",
												},
											},
										},
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Parameter: &openapi3spec.Parameter{
								Name: "array_enum_flat",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(false),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "array",
										Items: &openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "string",
												Enum: []interface {}{
													"a",
													"b",
												},
											},
										},
									},
								},
							},
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"304":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "Ok",
							},
						},
					},
				},
				Post: &openapi3spec.Operation{
					Tags: []string{
						"users",
					},
					Description: support.Ptr("Sets a user"),
					OperationID: "setUser",
					Parameters: []*openapi3spec.ParameterRef{
						&openapi3spec.ParameterRef{
							Ref: "#/components/parameters/PathParam",
							Parameter: &openapi3spec.Parameter{
								Name: "id",
								In: "path",
								Required: true,
								Style: support.Ptr("simple"),
								Explode: support.Ptr(false),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
									},
								},
							},
						},
						&openapi3spec.ParameterRef{
							Ref: "#/components/parameters/Param",
							Parameter: &openapi3spec.Parameter{
								Name: "param_component",
								In: "query",
								Required: true,
								Style: support.Ptr("form"),
								Explode: support.Ptr(true),
								Schema: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
									},
								},
							},
						},
					},
					RequestBody: &openapi3spec.RequestBodyRef{
						RequestBody: &openapi3spec.RequestBody{
							Description: support.Ptr("Description of a response body"),
							Content: map[string]*openapi3spec.MediaType{
								"application/json":&openapi3spec.MediaType{
									Schema: openapi3spec.SchemaRef{
										Ref: "#/components/schemas/Primitives",
										Schema: &openapi3spec.Schema{
											Description: support.Ptr("Checks to see that all Go primitives work"),
											Type: "object",
											Required: []string{
												"int",
												"int32",
												"int64",
												"float",
												"float32",
												"float64",
												"str",
												"bool",
												"int_null",
												"int32_null",
												"int64_null",
												"float_null",
												"float32_null",
												"float64_null",
												"str_null",
												"bool_null",
												"uuid",
												"uuid_null",
												"decimal",
												"decimal_null",
												"time_val",
												"time_null",
												"datetime_val",
												"datetime_null",
												"date_val",
												"date_null",
											},
											Properties: map[string]*openapi3spec.SchemaRef{
												"datetime_val":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("date-time"),
													},
												},
												"uuid_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("uuid"),
													},
												},
												"duration_val":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("duration"),
													},
												},
												"int32":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Maximum: support.Ptr(5.000000),
														Format: support.Ptr("int32"),
													},
												},
												"time_val":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("time"),
													},
												},
												"int64":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Minimum: support.Ptr(5.000000),
														Format: support.Ptr("int64"),
													},
												},
												"int32_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Nullable: true,
														Maximum: support.Ptr(5.000000),
														Format: support.Ptr("int32"),
													},
												},
												"str_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														MaxLength: support.Ptr(5),
														MinLength: support.Ptr(5),
														Enum: []interface {}{
															"hello",
														},
													},
												},
												"bool_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "boolean",
														Nullable: true,
													},
												},
												"date_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("date"),
													},
												},
												"float_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Nullable: true,
														MultipleOf: support.Ptr(5.500000),
													},
												},
												"str":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														MaxLength: support.Ptr(5),
														MinLength: support.Ptr(5),
														Enum: []interface {}{
															"hello",
														},
													},
												},
												"duration_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("duration"),
													},
												},
												"float":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														MultipleOf: support.Ptr(5.500000),
													},
												},
												"float64_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Nullable: true,
														Minimum: support.Ptr(5.000000),
														Format: support.Ptr("double"),
													},
												},
												"int64_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Nullable: true,
														Minimum: support.Ptr(5.000000),
														Format: support.Ptr("int64"),
													},
												},
												"datetime_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("date-time"),
													},
												},
												"date_val":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("date"),
													},
												},
												"decimal":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("decimal"),
													},
												},
												"int_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "integer",
														Nullable: true,
														MultipleOf: support.Ptr(5.000000),
													},
												},
												"int":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Description: support.Ptr("Normal int"),
														Type: "integer",
														MultipleOf: support.Ptr(5.000000),
													},
												},
												"float32_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Nullable: true,
														Maximum: support.Ptr(5.000000),
														Format: support.Ptr("float"),
													},
												},
												"time_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("time"),
													},
												},
												"decimal_null":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Nullable: true,
														Format: support.Ptr("decimal"),
													},
												},
												"uuid":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
														Format: support.Ptr("uuid"),
													},
												},
												"float64":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Minimum: support.Ptr(5.500000),
														Format: support.Ptr("double"),
													},
												},
												"bool":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "boolean",
													},
												},
												"float32":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "number",
														Maximum: support.Ptr(5.500000),
														Format: support.Ptr("float"),
													},
												},
											},
										},
									},
								},
							},
							Required: true,
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "Ok",
								Headers: map[string]*openapi3spec.HeaderRef{
									"X-Response-Header":&openapi3spec.HeaderRef{
										Header: &openapi3spec.Header{
											Description: support.Ptr("Test of an in-response header"),
											Style: support.Ptr("simple"),
											Schema: &openapi3spec.SchemaRef{
												Schema: &openapi3spec.Schema{
													Type: "string",
												},
											},
										},
									},
								},
								Content: map[string]*openapi3spec.MediaType{
									"application/json":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Ref: "#/components/schemas/Primitives",
											Schema: &openapi3spec.Schema{
												Description: support.Ptr("Checks to see that all Go primitives work"),
												Type: "object",
												Required: []string{
													"int",
													"int32",
													"int64",
													"float",
													"float32",
													"float64",
													"str",
													"bool",
													"int_null",
													"int32_null",
													"int64_null",
													"float_null",
													"float32_null",
													"float64_null",
													"str_null",
													"bool_null",
													"uuid",
													"uuid_null",
													"decimal",
													"decimal_null",
													"time_val",
													"time_null",
													"datetime_val",
													"datetime_null",
													"date_val",
													"date_null",
												},
												Properties: map[string]*openapi3spec.SchemaRef{
													"int32_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Nullable: true,
															Maximum: support.Ptr(5.000000),
															Format: support.Ptr("int32"),
														},
													},
													"str_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															MaxLength: support.Ptr(5),
															MinLength: support.Ptr(5),
															Enum: []interface {}{
																"hello",
															},
														},
													},
													"bool_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "boolean",
															Nullable: true,
														},
													},
													"date_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("date"),
														},
													},
													"float_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Nullable: true,
															MultipleOf: support.Ptr(5.500000),
														},
													},
													"str":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															MaxLength: support.Ptr(5),
															MinLength: support.Ptr(5),
															Enum: []interface {}{
																"hello",
															},
														},
													},
													"duration_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("duration"),
														},
													},
													"float":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															MultipleOf: support.Ptr(5.500000),
														},
													},
													"float64_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Nullable: true,
															Minimum: support.Ptr(5.000000),
															Format: support.Ptr("double"),
														},
													},
													"int64_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Nullable: true,
															Minimum: support.Ptr(5.000000),
															Format: support.Ptr("int64"),
														},
													},
													"datetime_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("date-time"),
														},
													},
													"date_val":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("date"),
														},
													},
													"decimal":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("decimal"),
														},
													},
													"int_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Nullable: true,
															MultipleOf: support.Ptr(5.000000),
														},
													},
													"float32_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Nullable: true,
															Maximum: support.Ptr(5.000000),
															Format: support.Ptr("float"),
														},
													},
													"time_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("time"),
														},
													},
													"decimal_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("decimal"),
														},
													},
													"uuid":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("uuid"),
														},
													},
													"float64":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Minimum: support.Ptr(5.500000),
															Format: support.Ptr("double"),
														},
													},
													"bool":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "boolean",
														},
													},
													"float32":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Maximum: support.Ptr(5.500000),
															Format: support.Ptr("float"),
														},
													},
													"int":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Description: support.Ptr("Normal int"),
															Type: "integer",
															MultipleOf: support.Ptr(5.000000),
														},
													},
													"datetime_val":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("date-time"),
														},
													},
													"uuid_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("uuid"),
														},
													},
													"duration_val":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("duration"),
														},
													},
													"int32":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Maximum: support.Ptr(5.000000),
															Format: support.Ptr("int32"),
														},
													},
													"time_val":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("time"),
														},
													},
													"int64":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Minimum: support.Ptr(5.000000),
															Format: support.Ptr("int64"),
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"default":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "Ok",
								Content: map[string]*openapi3spec.MediaType{
									"application/json":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Ref: "#/components/schemas/Primitives",
											Schema: &openapi3spec.Schema{
												Description: support.Ptr("Checks to see that all Go primitives work"),
												Type: "object",
												Required: []string{
													"int",
													"int32",
													"int64",
													"float",
													"float32",
													"float64",
													"str",
													"bool",
													"int_null",
													"int32_null",
													"int64_null",
													"float_null",
													"float32_null",
													"float64_null",
													"str_null",
													"bool_null",
													"uuid",
													"uuid_null",
													"decimal",
													"decimal_null",
													"time_val",
													"time_null",
													"datetime_val",
													"datetime_null",
													"date_val",
													"date_null",
												},
												Properties: map[string]*openapi3spec.SchemaRef{
													"str_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															MaxLength: support.Ptr(5),
															MinLength: support.Ptr(5),
															Enum: []interface {}{
																"hello",
															},
														},
													},
													"bool_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "boolean",
															Nullable: true,
														},
													},
													"int32_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Nullable: true,
															Maximum: support.Ptr(5.000000),
															Format: support.Ptr("int32"),
														},
													},
													"float_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Nullable: true,
															MultipleOf: support.Ptr(5.500000),
														},
													},
													"date_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("date"),
														},
													},
													"duration_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("duration"),
														},
													},
													"str":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															MaxLength: support.Ptr(5),
															MinLength: support.Ptr(5),
															Enum: []interface {}{
																"hello",
															},
														},
													},
													"float64_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Nullable: true,
															Minimum: support.Ptr(5.000000),
															Format: support.Ptr("double"),
														},
													},
													"float":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															MultipleOf: support.Ptr(5.500000),
														},
													},
													"datetime_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("date-time"),
														},
													},
													"date_val":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("date"),
														},
													},
													"decimal":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("decimal"),
														},
													},
													"int_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Nullable: true,
															MultipleOf: support.Ptr(5.000000),
														},
													},
													"int64_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Nullable: true,
															Minimum: support.Ptr(5.000000),
															Format: support.Ptr("int64"),
														},
													},
													"uuid":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("uuid"),
														},
													},
													"float64":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Minimum: support.Ptr(5.500000),
															Format: support.Ptr("double"),
														},
													},
													"bool":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "boolean",
														},
													},
													"float32":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Maximum: support.Ptr(5.500000),
															Format: support.Ptr("float"),
														},
													},
													"int":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Description: support.Ptr("Normal int"),
															Type: "integer",
															MultipleOf: support.Ptr(5.000000),
														},
													},
													"float32_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "number",
															Nullable: true,
															Maximum: support.Ptr(5.000000),
															Format: support.Ptr("float"),
														},
													},
													"time_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("time"),
														},
													},
													"decimal_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("decimal"),
														},
													},
													"uuid_null":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Nullable: true,
															Format: support.Ptr("uuid"),
														},
													},
													"datetime_val":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("date-time"),
														},
													},
													"int32":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Maximum: support.Ptr(5.000000),
															Format: support.Ptr("int32"),
														},
													},
													"time_val":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("time"),
														},
													},
													"int64":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "integer",
															Minimum: support.Ptr(5.000000),
															Format: support.Ptr("int64"),
														},
													},
													"duration_val":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
															Format: support.Ptr("duration"),
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
				Parameters: []*openapi3spec.ParameterRef{
					&openapi3spec.ParameterRef{
						Ref: "#/components/parameters/PathParam",
						Parameter: &openapi3spec.Parameter{
							Name: "id",
							In: "path",
							Required: true,
							Style: support.Ptr("simple"),
							Explode: support.Ptr(false),
							Schema: &openapi3spec.SchemaRef{
								Schema: &openapi3spec.Schema{
									Type: "string",
								},
							},
						},
					},
					&openapi3spec.ParameterRef{
						Ref: "#/components/parameters/Param",
						Parameter: &openapi3spec.Parameter{
							Name: "param_component",
							In: "query",
							Required: true,
							Style: support.Ptr("form"),
							Explode: support.Ptr(true),
							Schema: &openapi3spec.SchemaRef{
								Schema: &openapi3spec.Schema{
									Type: "string",
								},
							},
						},
					},
				},
				Extensions: map[string]interface {}{
					"x-dont-ignore":true,
				},
			},
		},
		"/test/unknown/body/type":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Post: &openapi3spec.Operation{
					OperationID: "testUnknownBodyType",
					RequestBody: &openapi3spec.RequestBodyRef{
						RequestBody: &openapi3spec.RequestBody{
							Description: support.Ptr("Desc"),
							Content: map[string]*openapi3spec.MediaType{
								"multipart/form-data":&openapi3spec.MediaType{
									Schema: openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
							Required: true,
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
								Content: map[string]*openapi3spec.MediaType{
									"multipart/form-data":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "string",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		"/test/inline":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					OperationID: "testInlinePrimitiveBody",
					RequestBody: &openapi3spec.RequestBodyRef{
						RequestBody: &openapi3spec.RequestBody{
							Description: support.Ptr("Desc"),
							Content: map[string]*openapi3spec.MediaType{
								"application/json":&openapi3spec.MediaType{
									Schema: openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
							Required: true,
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
							},
						},
					},
				},
				Post: &openapi3spec.Operation{
					OperationID: "testInline",
					RequestBody: &openapi3spec.RequestBodyRef{
						RequestBody: &openapi3spec.RequestBody{
							Description: support.Ptr("Desc"),
							Content: map[string]*openapi3spec.MediaType{
								"application/json":&openapi3spec.MediaType{
									Schema: openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "object",
											Required: []string{
												"id",
											},
											Properties: map[string]*openapi3spec.SchemaRef{
												"id":&openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
													},
												},
											},
										},
									},
								},
							},
							Required: true,
						},
					},
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
								Content: map[string]*openapi3spec.MediaType{
									"application/json":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "string",
											},
										},
									},
								},
							},
						},
						"201":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
								Content: map[string]*openapi3spec.MediaType{
									"application/json":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "object",
												Required: []string{
													"id",
												},
												Properties: map[string]*openapi3spec.SchemaRef{
													"id":&openapi3spec.SchemaRef{
														Schema: &openapi3spec.Schema{
															Type: "string",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		"/test/arraymaps":&openapi3spec.PathRef{
			Path: &openapi3spec.Path{
				Get: &openapi3spec.Operation{
					OperationID: "testMapsArrayInline",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
								Content: map[string]*openapi3spec.MediaType{
									"application/json":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "array",
												Items: &openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "object",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
				Post: &openapi3spec.Operation{
					OperationID: "testMapsArrayRef",
					Responses: map[string]*openapi3spec.ResponseRef{
						"200":&openapi3spec.ResponseRef{
							Response: &openapi3spec.Response{
								Description: "OK",
								Content: map[string]*openapi3spec.MediaType{
									"application/json":&openapi3spec.MediaType{
										Schema: openapi3spec.SchemaRef{
											Schema: &openapi3spec.Schema{
												Type: "array",
												Items: &openapi3spec.SchemaRef{
													Ref: "#/components/schemas/MapAny",
													Schema: &openapi3spec.Schema{
														Description: support.Ptr("Map any"),
														Type: "object",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
	Components: &openapi3spec.Components{
		Schemas: map[string]*openapi3spec.SchemaRef{
			"MapRecursive":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Recursively defined maps"),
					Type: "object",
					MaxProperties: support.Ptr(3),
					MinProperties: support.Ptr(2),
					AdditionalProperties: &openapi3spec.AdditionalProperties{
						SchemaRef: &openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Recursive"),
								Type: "object",
								MaxProperties: support.Ptr(4),
								MinProperties: support.Ptr(3),
								AdditionalProperties: &openapi3spec.AdditionalProperties{
									SchemaRef: &openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Description: support.Ptr("Recursive"),
											Type: "object",
											MaxProperties: support.Ptr(6),
											MinProperties: support.Ptr(5),
											AdditionalProperties: &openapi3spec.AdditionalProperties{
												SchemaRef: &openapi3spec.SchemaRef{
													Schema: &openapi3spec.Schema{
														Type: "string",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"AnyOf":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("An example of an object that can be exactly one of 3 things"),
					Type: "object",
					OneOf: []*openapi3spec.SchemaRef{
						&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/InheritanceA",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Consumable"),
								Type: "object",
								Required: []string{
									"a",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"a":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/InheritanceB",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Consumable"),
								Type: "object",
								Required: []string{
									"b",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"b":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Desc"),
								Type: "object",
								Required: []string{
									"someprop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"someprop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Description: support.Ptr("A string"),
											Type: "string",
										},
									},
								},
							},
						},
					},
				},
			},
			"RefValidation":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Check for arrays that can call validate function"),
					Type: "object",
					Required: []string{
						"mustValidateItem",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"mustValidateItem":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								MaxLength: support.Ptr(5),
							},
						},
					},
				},
			},
			"MapBug":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Embedded array objects break"),
					Type: "object",
					Properties: map[string]*openapi3spec.SchemaRef{
						"yap":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "array",
								Items: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "object",
									},
								},
							},
						},
					},
				},
			},
			"Enum":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Enum type"),
					Type: "string",
					Enum: []interface {}{
						"one",
						"two",
						"three",
					},
				},
			},
			"EnumRef":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Type: "string",
					Enum: []interface {}{
						"fun",
						"happy",
					},
				},
			},
			"ArraysWithRefValidation":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Check for arrays that can call validate function"),
					Type: "array",
					Items: &openapi3spec.SchemaRef{
						Ref: "#/components/schemas/RefValidation",
						Schema: &openapi3spec.Schema{
							Description: support.Ptr("Check for arrays that can call validate function"),
							Type: "object",
							Required: []string{
								"mustValidateItem",
							},
							Properties: map[string]*openapi3spec.SchemaRef{
								"mustValidateItem":&openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										MaxLength: support.Ptr(5),
									},
								},
							},
						},
					},
				},
			},
			"Map":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Map types"),
					Type: "object",
					AdditionalProperties: &openapi3spec.AdditionalProperties{
						SchemaRef: &openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "array",
								Items: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
									},
								},
							},
						},
					},
				},
			},
			"RefTargetOmittableNullable":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Referred to object"),
					Type: "object",
					Required: []string{
						"one",
						"three",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"four":&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/RefTargetNullable",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Referred to object"),
								Type: "object",
								Nullable: true,
								Required: []string{
									"prop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"prop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						"one":&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/RefTarget",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Referred to object"),
								Type: "object",
								Required: []string{
									"prop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"prop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						"two":&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/RefTarget",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Referred to object"),
								Type: "object",
								Required: []string{
									"prop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"prop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						"three":&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/RefTargetNullable",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Referred to object"),
								Type: "object",
								Nullable: true,
								Required: []string{
									"prop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"prop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
					},
				},
			},
			"AllOf":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("All of example"),
					Type: "object",
					Required: []string{
						"a",
						"b",
						"someprop",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"someprop":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("A string"),
								Type: "string",
							},
						},
						"a":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
							},
						},
						"b":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
							},
						},
					},
					AllOf: []*openapi3spec.SchemaRef{
						&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/InheritanceA",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Consumable"),
								Type: "object",
								Required: []string{
									"a",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"a":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/InheritanceB",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Consumable"),
								Type: "object",
								Required: []string{
									"b",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"b":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Desc"),
								Type: "object",
								Required: []string{
									"someprop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"someprop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Description: support.Ptr("A string"),
											Type: "string",
										},
									},
								},
							},
						},
					},
				},
			},
			"Primitives":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Checks to see that all Go primitives work"),
					Type: "object",
					Required: []string{
						"int",
						"int32",
						"int64",
						"float",
						"float32",
						"float64",
						"str",
						"bool",
						"int_null",
						"int32_null",
						"int64_null",
						"float_null",
						"float32_null",
						"float64_null",
						"str_null",
						"bool_null",
						"uuid",
						"uuid_null",
						"decimal",
						"decimal_null",
						"time_val",
						"time_null",
						"datetime_val",
						"datetime_null",
						"date_val",
						"date_null",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"decimal":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Format: support.Ptr("decimal"),
							},
						},
						"int_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "integer",
								Nullable: true,
								MultipleOf: support.Ptr(5.000000),
							},
						},
						"int64_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "integer",
								Nullable: true,
								Minimum: support.Ptr(5.000000),
								Format: support.Ptr("int64"),
							},
						},
						"datetime_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Nullable: true,
								Format: support.Ptr("date-time"),
							},
						},
						"date_val":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Format: support.Ptr("date"),
							},
						},
						"bool":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "boolean",
							},
						},
						"float32":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "number",
								Maximum: support.Ptr(5.500000),
								Format: support.Ptr("float"),
							},
						},
						"int":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Normal int"),
								Type: "integer",
								MultipleOf: support.Ptr(5.000000),
							},
						},
						"float32_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "number",
								Nullable: true,
								Maximum: support.Ptr(5.000000),
								Format: support.Ptr("float"),
							},
						},
						"time_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Nullable: true,
								Format: support.Ptr("time"),
							},
						},
						"decimal_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Nullable: true,
								Format: support.Ptr("decimal"),
							},
						},
						"uuid":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Format: support.Ptr("uuid"),
							},
						},
						"float64":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "number",
								Minimum: support.Ptr(5.500000),
								Format: support.Ptr("double"),
							},
						},
						"datetime_val":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Format: support.Ptr("date-time"),
							},
						},
						"uuid_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Nullable: true,
								Format: support.Ptr("uuid"),
							},
						},
						"int64":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "integer",
								Minimum: support.Ptr(5.000000),
								Format: support.Ptr("int64"),
							},
						},
						"duration_val":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Format: support.Ptr("duration"),
							},
						},
						"int32":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "integer",
								Maximum: support.Ptr(5.000000),
								Format: support.Ptr("int32"),
							},
						},
						"time_val":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Format: support.Ptr("time"),
							},
						},
						"int32_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "integer",
								Nullable: true,
								Maximum: support.Ptr(5.000000),
								Format: support.Ptr("int32"),
							},
						},
						"str_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Nullable: true,
								MaxLength: support.Ptr(5),
								MinLength: support.Ptr(5),
								Enum: []interface {}{
									"hello",
								},
							},
						},
						"bool_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "boolean",
								Nullable: true,
							},
						},
						"date_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Nullable: true,
								Format: support.Ptr("date"),
							},
						},
						"float_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "number",
								Nullable: true,
								MultipleOf: support.Ptr(5.500000),
							},
						},
						"str":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								MaxLength: support.Ptr(5),
								MinLength: support.Ptr(5),
								Enum: []interface {}{
									"hello",
								},
							},
						},
						"duration_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
								Nullable: true,
								Format: support.Ptr("duration"),
							},
						},
						"float":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "number",
								MultipleOf: support.Ptr(5.500000),
							},
						},
						"float64_null":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "number",
								Nullable: true,
								Minimum: support.Ptr(5.000000),
								Format: support.Ptr("double"),
							},
						},
					},
				},
			},
			"ArrayEmbedded":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Embedded object in an array"),
					Type: "array",
					Items: &openapi3spec.SchemaRef{
						Schema: &openapi3spec.Schema{
							Description: support.Ptr("This object is embedded in an array"),
							Type: "object",
							Required: []string{
								"prop",
							},
							Properties: map[string]*openapi3spec.SchemaRef{
								"prop":&openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
										MaxLength: support.Ptr(5),
									},
								},
							},
						},
					},
				},
			},
			"MapAny":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Map any"),
					Type: "object",
				},
			},
			"OneOf":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("An example of an object that can be exactly one of 3 things"),
					Type: "object",
					OneOf: []*openapi3spec.SchemaRef{
						&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/InheritanceA",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Consumable"),
								Type: "object",
								Required: []string{
									"a",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"a":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/InheritanceB",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Consumable"),
								Type: "object",
								Required: []string{
									"b",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"b":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Desc"),
								Type: "object",
								Required: []string{
									"someprop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"someprop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Description: support.Ptr("A string"),
											Type: "string",
										},
									},
								},
							},
						},
					},
				},
			},
			"InheritanceB":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Consumable"),
					Type: "object",
					Required: []string{
						"b",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"b":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
							},
						},
					},
				},
			},
			"Arrays":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Arrays as a property"),
					Type: "object",
					Required: []string{
						"array",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"array":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "array",
								Items: &openapi3spec.SchemaRef{
									Schema: &openapi3spec.Schema{
										Type: "string",
									},
								},
							},
						},
					},
				},
			},
			"OmittableEnum":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Type: "object",
					Properties: map[string]*openapi3spec.SchemaRef{
						"enum_ref_array":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "array",
								Items: &openapi3spec.SchemaRef{
									Ref: "#/components/schemas/EnumRef",
									Schema: &openapi3spec.Schema{
										Type: "string",
										Enum: []interface {}{
											"fun",
											"happy",
										},
									},
								},
							},
						},
						"enum_ref":&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/EnumRef",
							Schema: &openapi3spec.Schema{
								Type: "string",
								Enum: []interface {}{
									"fun",
									"happy",
								},
							},
						},
					},
				},
			},
			"Ref":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("References to other objects"),
					Type: "object",
					Required: []string{
						"ref_normal",
						"ref_null",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"ref_normal":&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/RefTarget",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Referred to object"),
								Type: "object",
								Required: []string{
									"prop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"prop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
						"ref_null":&openapi3spec.SchemaRef{
							Ref: "#/components/schemas/RefTargetNullable",
							Schema: &openapi3spec.Schema{
								Description: support.Ptr("Referred to object"),
								Type: "object",
								Nullable: true,
								Required: []string{
									"prop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"prop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
					},
				},
			},
			"ArrayRecursive":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Recursive definition of an array"),
					Type: "array",
					Items: &openapi3spec.SchemaRef{
						Schema: &openapi3spec.Schema{
							Description: support.Ptr("Recursive"),
							Type: "array",
							Items: &openapi3spec.SchemaRef{
								Schema: &openapi3spec.Schema{
									Description: support.Ptr("Recursive"),
									Type: "array",
									Items: &openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
									MaxItems: support.Ptr(15),
									MinItems: support.Ptr(12),
								},
							},
							MaxItems: support.Ptr(8),
							MinItems: support.Ptr(5),
						},
					},
					MaxItems: support.Ptr(10),
					MinItems: support.Ptr(2),
				},
			},
			"MapEmbedded":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Map types with an embedded object"),
					Type: "object",
					AdditionalProperties: &openapi3spec.AdditionalProperties{
						SchemaRef: &openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "object",
								Required: []string{
									"prop",
								},
								Properties: map[string]*openapi3spec.SchemaRef{
									"prop":&openapi3spec.SchemaRef{
										Schema: &openapi3spec.Schema{
											Type: "string",
										},
									},
								},
							},
						},
					},
				},
			},
			"RefTargetNullable":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Referred to object"),
					Type: "object",
					Nullable: true,
					Required: []string{
						"prop",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"prop":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
							},
						},
					},
				},
			},
			"InheritanceA":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Consumable"),
					Type: "object",
					Required: []string{
						"a",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"a":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
							},
						},
					},
				},
			},
			"Array":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Just normal arrays"),
					Type: "array",
					Items: &openapi3spec.SchemaRef{
						Schema: &openapi3spec.Schema{
							Type: "string",
						},
					},
				},
			},
			"RefTarget":&openapi3spec.SchemaRef{
				Schema: &openapi3spec.Schema{
					Description: support.Ptr("Referred to object"),
					Type: "object",
					Required: []string{
						"prop",
					},
					Properties: map[string]*openapi3spec.SchemaRef{
						"prop":&openapi3spec.SchemaRef{
							Schema: &openapi3spec.Schema{
								Type: "string",
							},
						},
					},
				},
			},
		},
		Parameters: map[string]*openapi3spec.ParameterRef{
			"Param":&openapi3spec.ParameterRef{
				Parameter: &openapi3spec.Parameter{
					Name: "param_component",
					In: "query",
					Required: true,
					Style: support.Ptr("form"),
					Explode: support.Ptr(true),
					Schema: &openapi3spec.SchemaRef{
						Schema: &openapi3spec.Schema{
							Type: "string",
						},
					},
				},
			},
			"PathParam":&openapi3spec.ParameterRef{
				Parameter: &openapi3spec.Parameter{
					Name: "id",
					In: "path",
					Required: true,
					Style: support.Ptr("simple"),
					Explode: support.Ptr(false),
					Schema: &openapi3spec.SchemaRef{
						Schema: &openapi3spec.Schema{
							Type: "string",
						},
					},
				},
			},
		},
	},
}