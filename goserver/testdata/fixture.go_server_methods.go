// Code generated by oa3 (https://github.com/aarondl/oa3). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.
package oa3gen

import (
	"net/http"

	"github.com/aarondl/oa3/support"
	"github.com/volatiletech/null/v8"
)

// authenticate post /auth
func (o GoServer) authenticateOp(w http.ResponseWriter, r *http.Request) error {
	var err error
	var ers []error
	var errs map[string][]string
	_, _, _ = err, ers, errs

	if errs != nil {
		return o.cnv(errs)
	}

	return nil
}

// getuser get /users/{id}
func (o GoServer) getuserOp(w http.ResponseWriter, r *http.Request) error {
	var err error
	var ers []error
	var errs map[string][]string
	_, _, _ = err, ers, errs

	const n0 = `valid_str`
	s0 := r.URL.Query().Get(n0)
	var p0 null.String
	if len(s0) != 0 {
		p0, err = support.StringToNullstring(s0)
		if err != nil {
			errs = support.AddErrs(errs, n0, errors.New(`was not in a valid format`))
		}
		ers = nil
		if err := support.MaxLength(p0, 5); err != nil {
			ers = append(ers, err)
		}

		if err := support.MinLength(p0, 2); err != nil {
			ers = append(ers, err)
		}
		if err := support.Enum(p0, []string{"he\"llo"}); err != nil {
			ers = append(ers, err)
		}

		if len(ers) != 0 {
			errs = support.AddErrs(errs, n0, ers...)
		}
	}

	const n1 = `req_valid_str`
	s1 := r.URL.Query().Get(n1)
	var p1 null.String
	if len(s1) == 0 {
		errs = support.AddErrs(errs, n1, errors.New(`must not be empty`))
	} else {
		p1, err = support.StringToNullstring(s1)
		if err != nil {
			errs = support.AddErrs(errs, n1, errors.New(`was not in a valid format`))
		}
		ers = nil
		if err := support.MaxLength(p1, 5); err != nil {
			ers = append(ers, err)
		}

		if err := support.MinLength(p1, 2); err != nil {
			ers = append(ers, err)
		}
		if err := support.Enum(p1, []string{"he\"llo"}); err != nil {
			ers = append(ers, err)
		}

		if len(ers) != 0 {
			errs = support.AddErrs(errs, n1, ers...)
		}
	}

	const n2 = `valid_int`
	s2 := r.URL.Query().Get(n2)
	var p2 int
	if len(s2) != 0 {
		p2, err = support.StringToInt(s2)
		if err != nil {
			errs = support.AddErrs(errs, n2, errors.New(`was not in a valid format`))
		}
		ers = nil
		if err := support.ValidateMaxInt(int64(p2), 5, true); err != nil {
			ers = append(ers, err)
		}
		if err := support.ValidateMinInt(int64(p2), 2, false); err != nil {
			ers = append(ers, err)
		}
		if err := support.ValidateMultipleOfInt(int64(p2), 2, false); err != nil {
			ers = append(ers, err)
		}
		if len(ers) != 0 {
			errs = support.AddErrs(errs, n2, ers...)
		}
	}

	const n3 = `req_valid_int`
	s3 := r.URL.Query().Get(n3)
	var p3 int
	if len(s3) == 0 {
		errs = support.AddErrs(errs, n3, errors.New(`must not be empty`))
	} else {
		p3, err = support.StringToInt(s3)
		if err != nil {
			errs = support.AddErrs(errs, n3, errors.New(`was not in a valid format`))
		}
		ers = nil
		if err := support.ValidateMaxInt(int64(p3), 5, true); err != nil {
			ers = append(ers, err)
		}
		if err := support.ValidateMinInt(int64(p3), 2, false); err != nil {
			ers = append(ers, err)
		}
		if err := support.ValidateMultipleOfInt(int64(p3), 2, false); err != nil {
			ers = append(ers, err)
		}
		if len(ers) != 0 {
			errs = support.AddErrs(errs, n3, ers...)
		}
	}

	const n4 = `valid_num`
	s4 := r.URL.Query().Get(n4)
	var p4 float64
	if len(s4) != 0 {
		p4, err = support.StringToFloat64(s4)
		if err != nil {
			errs = support.AddErrs(errs, n4, errors.New(`was not in a valid format`))
		}
		ers = nil
		if err := support.ValidateMaxFloat64(float64(p4), 10.5, false); err != nil {
			ers = append(ers, err)
		}
		if err := support.ValidateMinFloat64(float64(p4), 5.5, true); err != nil {
			ers = append(ers, err)
		}
		if err := support.ValidateMultipleOfFloat64(float64(p4), 2.5, true); err != nil {
			ers = append(ers, err)
		}
		if len(ers) != 0 {
			errs = support.AddErrs(errs, n4, ers...)
		}
	}

	const n5 = `req_valid_num`
	s5 := r.URL.Query().Get(n5)
	var p5 float64
	if len(s5) != 0 {
		p5, err = support.StringToFloat64(s5)
		if err != nil {
			errs = support.AddErrs(errs, n5, errors.New(`was not in a valid format`))
		}
		ers = nil
		if err := support.ValidateMaxFloat64(float64(p5), 10.5, false); err != nil {
			ers = append(ers, err)
		}
		if err := support.ValidateMinFloat64(float64(p5), 5.5, true); err != nil {
			ers = append(ers, err)
		}
		if err := support.ValidateMultipleOfFloat64(float64(p5), 2.5, true); err != nil {
			ers = append(ers, err)
		}
		if len(ers) != 0 {
			errs = support.AddErrs(errs, n5, ers...)
		}
	}

	const n6 = `valid_bool`
	s6 := r.URL.Query().Get(n6)
	var p6 bool
	if len(s6) != 0 {
		p6, err = support.StringToBool(s6)
		if err != nil {
			errs = support.AddErrs(errs, n6, errors.New(`was not in a valid format`))
		}
	}

	const n7 = `req_valid_bool`
	s7 := r.URL.Query().Get(n7)
	var p7 bool
	if len(s7) == 0 {
		errs = support.AddErrs(errs, n7, errors.New(`must not be empty`))
	} else {
		p7, err = support.StringToBool(s7)
		if err != nil {
			errs = support.AddErrs(errs, n7, errors.New(`was not in a valid format`))
		}
	}

	if errs != nil {
		return o.cnv(errs)
	}

	return nil
}

// setuser post /users/{id}
func (o GoServer) setuserOp(w http.ResponseWriter, r *http.Request) error {
	var err error
	var ers []error
	var errs map[string][]string
	_, _, _ = err, ers, errs
	// #/components/schemas/Primitives
	var rb Primitives

	if r.Body == nil {
		return support.ErrNilBody
	} else {
		defer r.Body.Close()
		b, err := ioutil.ReadAll(r.Body)
		if err != nil {
			return err
		}

		if err = json.Unmarshal(b, &rb); err != nil {
			return err
		}

		if newErrs := rb.ValidateSchemaModel(); newErrs != nil {
			if errs == nil {
				errs = make(map[string][]string)
			}
			for n, e := range newErrs {
				errs[n] = e
			}
		}
	}

	if errs != nil {
		return o.cnv(errs)
	}

	return nil
}
